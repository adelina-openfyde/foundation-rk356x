Index: src/ash/components/arc/video_accelerator/gpu_arc_video_decode_accelerator.cc
===================================================================
--- src.orig/ash/components/arc/video_accelerator/gpu_arc_video_decode_accelerator.cc
+++ src/ash/components/arc/video_accelerator/gpu_arc_video_decode_accelerator.cc
@@ -386,7 +386,7 @@ void GpuArcVideoDecodeAccelerator::Initi
 
   profile_ = config->profile;
 #if BUILDFLAG(USE_CHROMEOS_MEDIA_ACCELERATION)
-  const bool use_vd = base::FeatureList::IsEnabled(arc::kVideoDecoder);
+  const bool use_vd = false;
 #if BUILDFLAG(USE_ARC_PROTECTED_MEDIA)
   if (!use_vd) {
     LOG(ERROR) << "Unsupported path: builds with USE_ARC_PROTECTED_MEDIA must "
Index: src/media/gpu/v4l2/v4l2_video_decode_accelerator.cc
===================================================================
--- src.orig/media/gpu/v4l2/v4l2_video_decode_accelerator.cc
+++ src/media/gpu/v4l2/v4l2_video_decode_accelerator.cc
@@ -413,7 +413,7 @@ void V4L2VideoDecodeAccelerator::AssignP
 
   enum v4l2_memory memory;
   if (!image_processor_device_ && output_mode_ == Config::OutputMode::IMPORT)
-    memory = V4L2_MEMORY_DMABUF;
+    memory = V4L2_MEMORY_MMAP;
   else
     memory = V4L2_MEMORY_MMAP;
 
@@ -1511,6 +1511,34 @@ bool V4L2VideoDecodeAccelerator::DequeueOutputBuffer() {
         return false;
       }
     } else {
+      if (!image_processor_device_ && output_mode_ == Config::OutputMode::IMPORT) {
+        size_t frame_dma_buffer_size = 0;
+        for (int i = 0; i < (int)output_record.output_frame->DmabufFds().size(); i++) {
+          frame_dma_buffer_size += output_record.output_frame->layout().planes()[i].size;
+        }
+
+        if (frame_dma_buffer_size == buf->GetPlaneBytesUsed(0)) {
+          uint8_t* dst = static_cast<uint8_t*>(
+              mmap(NULL, frame_dma_buffer_size, PROT_READ | PROT_WRITE,
+                   MAP_SHARED, output_record.output_frame->DmabufFds()[0].get(),
+                   output_record.output_frame->layout().planes()[0].offset));
+          if (dst == MAP_FAILED) {
+            LOG(ERROR) << "dst == MAP_FAILED";
+            NOTIFY_ERROR(PLATFORM_FAILURE);
+            return false;
+          } else {
+            const uint8_t* data =
+                static_cast<const uint8_t*>(buf->GetPlaneMapping(0)) +
+                output_record.output_frame->layout().planes()[0].offset;
+            memcpy(dst, data, buf->GetPlaneBytesUsed(0));
+          }
+          munmap(dst, frame_dma_buffer_size);
+        } else {
+          LOG(ERROR) << "frame_dma_buffer do not match dq_buf";
+          NOTIFY_ERROR(PLATFORM_FAILURE);
+          return false;
+        }
+      }
       SendBufferToClient(buf->BufferId(), bitstream_buffer_id, buf);
     }
   }