From 5b5b6322ce45a6ccaa7518bc65570ff1e546ee32 Mon Sep 17 00:00:00 2001
From: Su Yue <glass@fydeos.io>
Date: Thu, 9 Feb 2023 09:05:36 +0800
Subject: [PATCH] Revert "minigbm: rockchip: Support upstream AFBC modifier"

This reverts commit 365e5b4a9efe758236bc7bd43262bc32508c4171.
---
 rockchip.c | 27 +++++++--------------------
 1 file changed, 7 insertions(+), 20 deletions(-)

diff --git a/rockchip.c b/rockchip.c
index 17478f32a5e9..b192bff4b9d7 100644
--- a/rockchip.c
+++ b/rockchip.c
@@ -6,7 +6,6 @@
 
 #ifdef DRV_ROCKCHIP
 
-#include <drm_fourcc.h>
 #include <errno.h>
 #include <inttypes.h>
 #include <rockchip_drm.h>
@@ -19,10 +18,6 @@
 #include "drv_priv.h"
 #include "util.h"
 
-#define DRM_FORMAT_MOD_ROCKCHIP_AFBC                                                               \
-	DRM_FORMAT_MOD_ARM_AFBC(AFBC_FORMAT_MOD_BLOCK_SIZE_16x16 | AFBC_FORMAT_MOD_SPARSE |        \
-				AFBC_FORMAT_MOD_YTR)
-
 struct rockchip_private_map_data {
 	void *cached_addr;
 	void *gem_addr;
@@ -35,8 +30,7 @@ static const uint32_t scanout_render_formats[] = { DRM_FORMAT_ABGR8888, DRM_FORM
 static const uint32_t texture_only_formats[] = { DRM_FORMAT_NV12, DRM_FORMAT_YVU420,
 						 DRM_FORMAT_YVU420_ANDROID };
 
-static int afbc_bo_from_format(struct bo *bo, uint32_t width, uint32_t height, uint32_t format,
-			       uint64_t modifier)
+static int afbc_bo_from_format(struct bo *bo, uint32_t width, uint32_t height, uint32_t format)
 {
 	/* We've restricted ourselves to four bytes per pixel. */
 	const uint32_t pixel_size = 4;
@@ -75,7 +69,7 @@ static int afbc_bo_from_format(struct bo *bo, uint32_t width, uint32_t height, u
 
 	bo->meta.total_size = total_size;
 
-	bo->meta.format_modifier = modifier;
+	bo->meta.format_modifier = DRM_FORMAT_MOD_CHROMEOS_ROCKCHIP_AFBC;
 
 	return 0;
 }
@@ -120,14 +114,6 @@ static int rockchip_bo_create_with_modifiers(struct bo *bo, uint32_t width, uint
 	int ret;
 	size_t plane;
 	struct drm_rockchip_gem_create gem_create = { 0 };
-	uint64_t afbc_modifier;
-
-	if (drv_has_modifier(modifiers, count, DRM_FORMAT_MOD_ROCKCHIP_AFBC))
-		afbc_modifier = DRM_FORMAT_MOD_ROCKCHIP_AFBC;
-	else if (drv_has_modifier(modifiers, count, DRM_FORMAT_MOD_CHROMEOS_ROCKCHIP_AFBC))
-		afbc_modifier = DRM_FORMAT_MOD_CHROMEOS_ROCKCHIP_AFBC;
-	else
-		afbc_modifier = 0;
 
 	if (format == DRM_FORMAT_NV12) {
 		uint32_t w_mbs = DIV_ROUND_UP(width, 16);
@@ -142,10 +128,12 @@ static int rockchip_bo_create_with_modifiers(struct bo *bo, uint32_t width, uint
 		 * driver to store motion vectors.
 		 */
 		bo->meta.total_size += w_mbs * h_mbs * 128;
-	} else if (width <= 2560 && afbc_modifier && bo->drv->compression) {
+	} else if (width <= 2560 &&
+		   drv_has_modifier(modifiers, count, DRM_FORMAT_MOD_CHROMEOS_ROCKCHIP_AFBC) &&
+		   bo->drv->compression) {
 		/* If the caller has decided they can use AFBC, always
 		 * pick that */
-		afbc_bo_from_format(bo, width, height, format, afbc_modifier);
+		afbc_bo_from_format(bo, width, height, format);
 	} else {
 		if (!drv_has_modifier(modifiers, count, DRM_FORMAT_MOD_LINEAR)) {
 			errno = EINVAL;
@@ -201,8 +189,7 @@ static void *rockchip_bo_map(struct bo *bo, struct vma *vma, size_t plane, uint3
 
 	/* We can only map buffers created with SW access flags, which should
 	 * have no modifiers (ie, not AFBC). */
-	if (bo->meta.format_modifier == DRM_FORMAT_MOD_CHROMEOS_ROCKCHIP_AFBC ||
-	    bo->meta.format_modifier == DRM_FORMAT_MOD_ROCKCHIP_AFBC)
+	if (bo->meta.format_modifier == DRM_FORMAT_MOD_CHROMEOS_ROCKCHIP_AFBC)
 		return MAP_FAILED;
 
 	gem_map.handle = bo->handles[0].u32;
-- 
2.39.1

